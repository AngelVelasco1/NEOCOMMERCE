CREATE DATABASE neocommerce;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'orders_paymentmethod_enum') THEN
        CREATE TYPE orders_paymentmethod_enum AS ENUM ('paypal', 'nequi', 'efecty');
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'orders_status_enum') THEN
        CREATE TYPE orders_status_enum AS ENUM ('Pending', 'Paid', 'Processing', 'Shipped', 'Delivered');
    END IF;
END $$;

-- 1. Tablas hijas de relaciones complejas
DROP TABLE IF EXISTS ORDER_ITEMS CASCADE;
DROP TABLE IF EXISTS ORDER_LOGS CASCADE;
DROP TABLE IF EXISTS CART_ITEMS CASCADE;
DROP TABLE IF EXISTS CART CASCADE;
DROP TABLE IF EXISTS REVIEWS CASCADE;
DROP TABLE IF EXISTS IMAGES CASCADE;
DROP TABLE IF EXISTS ADDRESSES CASCADE;

-- 2. Tablas con múltiples dependencias
DROP TABLE IF EXISTS ORDERS CASCADE;
DROP TABLE IF EXISTS PRODUCTS CASCADE;
DROP TABLE IF EXISTS CATEGORY_SUBCATEGORY CASCADE;
DROP TABLE IF EXISTS ROLE_PERMISSIONS CASCADE;

-- 3. Tablas de relación base
DROP TABLE IF EXISTS BRANDS CASCADE;
DROP TABLE IF EXISTS CATEGORIES CASCADE;
DROP TABLE IF EXISTS SUBCATEGORY CASCADE;
DROP TABLE IF EXISTS PERMISSIONS CASCADE;
DROP TABLE IF EXISTS ROLES CASCADE;

-- 4. Usuarios y cupones
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS COUPONS CASCADE;


CREATE TABLE IF NOT EXISTS ROLES (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS PERMISSIONS (
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL, 
  name VARCHAR(255) UNIQUE NOT NULL,
  description VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS ROLE_PERMISSIONS (
  roleId INT NOT NULL, 
  permissionId INT NOT NULL, 
  FOREIGN KEY (roleId) REFERENCES ROLES(id),
  FOREIGN KEY (permissionId) REFERENCES PERMISSIONS(id),
  PRIMARY KEY (roleId, permissionId)
);


CREATE TABLE IF NOT EXISTS USERS (
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  emailVerified BOOLEAN,
  password VARCHAR(255) NOT NULL,
  phoneNumber VARCHAR(255) UNIQUE NOT NULL,
  roleId INT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  FOREIGN KEY (roleId) REFERENCES ROLES(id)
);


CREATE TABLE IF NOT EXISTS SUBCATEGORY (
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL 
);

CREATE TABLE IF NOT EXISTS CATEGORIES (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255)  UNIQUE NOT NULL,
  idSubcategory INT NOT NULL,
  FOREIGN KEY (idSubcategory) REFERENCES SUBCATEGORY(id)
);

CREATE TABLE IF NOT EXISTS CATEGORY_SUBCATEGORY (
  categoryId INT NOT NULL, 
  subcategoryId INT NOT NULL, 
  FOREIGN KEY (categoryId) REFERENCES CATEGORIES(id),
  FOREIGN KEY (subcategoryId) REFERENCES SUBCATEGORY(id),
  PRIMARY KEY (categoryId, subcategoryId)
);

CREATE TABLE IF NOT EXISTS BRANDS (
  id INT PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  imageUrl VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS PRODUCTS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  price INT NOT NULL,
  stock INT NOT NULL,
  weight DECIMAL(8,2) NOT NULL,
  sizes VARCHAR(255) NOT NULL,
  isActive BOOLEAN NOT NULL,
  categoryId INT NOT NULL,
  brandId INT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  createdBy INT NOT NULL,
  updatedAt TIMESTAMP DEFAULT NULL,
  updatedBy INT NOT NULL,
  FOREIGN KEY (categoryId) REFERENCES CATEGORIES(id),
  FOREIGN KEY (brandId) REFERENCES BRANDS(id)
);

CREATE TABLE REVIEWS (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
    rating INT NOT NULL, -- [0 - 5]
    comment TEXT, 
    userId INT NOT NULL,
    productId INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (userId) REFERENCES USERS(id),
    FOREIGN KEY (productId) REFERENCES PRODUCTS(id)
);

CREATE TABLE IF NOT EXISTS COUPONS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL, 
  code VARCHAR(255) NOT NULL,
  discount DECIMAL(8,2) NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  expiresAt TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDERS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  status orders_status_enum NOT NULL,
  total INT NOT NULL,
  paymentMethod orders_paymentmethod_enum NOT NULL,
  paymentStatus BOOLEAN NOT NULL,
  transactionId VARCHAR(255) NOT NULL,
  userId INT NOT NULL,
  couponId INT,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updatedAt TIMESTAMP DEFAULT NULL,
  updatedBy INT NOT NULL,
  FOREIGN KEY (userId) REFERENCES USERS(id),
  FOREIGN KEY (couponId) REFERENCES COUPONS(id)
);

CREATE TABLE IF NOT EXISTS ORDER_ITEMS (
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  price INT NOT NULL,
  quantity INT NOT NULL,
  subTotal INT GENERATED ALWAYS AS (price * quantity) STORED,
  productId INT NOT NULL,
  orderId INT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updatedAt TIMESTAMP DEFAULT NULL,
  FOREIGN KEY (productId) REFERENCES PRODUCTS(id),
  FOREIGN KEY (orderId) REFERENCES ORDERS(id)
);


CREATE TABLE IF NOT EXISTS ORDER_LOGS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  previousStatus orders_status_enum NOT NULL,
  newStatus orders_status_enum NOT NULL,
  note VARCHAR(255),
  ipAddress VARCHAR(45) NOT NULL,
  orderId INT NOT NULL,
  updatedAt TIMESTAMP DEFAULT NULL,
  updatedBy INT NOT NULL,
  FOREIGN KEY (orderId) REFERENCES ORDERS(id)
);

CREATE TABLE IF NOT EXISTS IMAGES (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  imageURL VARCHAR(255) NOT NULL,
  colorCode VARCHAR(7) NOT NULL,
  color VARCHAR(255) NOT NULL, 
  productId INT NOT NULL,
  FOREIGN KEY (productId) REFERENCES PRODUCTS(id)
);

CREATE TABLE IF NOT EXISTS ADDRESSES (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  address VARCHAR(255) NOT NULL,
  country VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  department VARCHAR(255) NOT NULL,
  userId INT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  FOREIGN KEY (userId) REFERENCES USERS(id)
);

CREATE TABLE IF NOT EXISTS CART (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  userId INT, -- Carrito asociado al usuario si se loguea 
  sessionToken UUID, -- Carrito asociado a la sesion si el usuario es invitado
  totalPrice INT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  expiresAt TIMESTAMP DEFAULT NULL,
  FOREIGN KEY (userId) REFERENCES USERS(id)
);

CREATE TABLE IF NOT EXISTS CART_ITEMS (
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
  cartId INT NOT NULL,
  productId INT NOT NULL,
  quantity INT NOT NULL,
  unitPrice INT NOT NULL,
  expiresAt TIMESTAMP NOT NULL,
  FOREIGN KEY (cartId) REFERENCES CART(id),
  FOREIGN KEY (productId) REFERENCES PRODUCTS(id)
);


