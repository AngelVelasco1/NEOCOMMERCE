DROP TYPE IF EXISTS ORDERS_paymentMethod_enum;
DROP TYPE IF EXISTS ORDER_LOGS_previousStatus_enum;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS PRODUCTS;
DROP TABLE IF EXISTS ORDER_ITEMS;
DROP TABLE IF EXISTS CATEGORIES;
DROP TABLE IF EXISTS ORDERS;
DROP TABLE IF EXISTS IMAGES;
DROP TABLE IF EXISTS ADDRESSES;
DROP TABLE IF EXISTS COUNTRIES;
DROP TABLE IF EXISTS COUPONS;
DROP TABLE IF EXISTS CART;
DROP TABLE IF EXISTS CART_ITEMS;
DROP TABLE IF EXISTS INVENTORY;
DROP TABLE IF EXISTS ORDER_LOGS;
DROP TABLE IF EXISTS SUBCATEGORY;
DROP TABLE IF EXISTS ROLES;
DROP TABLE IF EXISTS PERMISSIONS;
DROP TABLE IF EXISTS ROLE_PERMISSIONS;


CREATE TYPE ORDERS_paymentMethod_enum  AS ENUM  (
  'paypal',
  'Q'
);

CREATE TYPE ORDER_LOGS_previousStatus_enum  AS ENUM (
  'HSDJSAHJDAS'
);

CREATE TYPE ORDERS_status_enum  AS ENUM (
  'HSDJSAHJDADDDS'
);


CREATE TABLE IF NOT EXISTS USERS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  emailVerified BOOLEAN,
  password VARCHAR(255) NOT NULL,
  phoneNumber VARCHAR(255) NOT NULL,
  roleId int,
  createdAt TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCTS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(255) NOT NULL,
  price INT NOT NULL,
  weight DECIMAL(8,2) NOT NULL,
  size DECIMAL(8,2) NOT NULL,
  categoryId INT NOT NULL,
  isActive BOOLEAN NOT NULL,
  createdAt TIMESTAMP NOT NULL,
  updatedAt TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDER_ITEMS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  unitPrice DECIMAL(8,2) NOT NULL,
  salePrice DECIMAL(8,2) NOT NULL,
  quantity INT NOT NULL,
  subTotal DECIMAL(8,2) NOT NULL,
  productId BIGINT NOT NULL,
  orderId BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS CATEGORIES (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  idSubcategoy BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDERS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  date timestamp  NOT NULL,
  status ORDERS_status_enum NOT NULL,
  amount INT NOT NULL,
  paymentMethod ORDERS_paymentMethod_enum NOT NULL,
  transactionId BIGINT NOT NULL,
  userId BIGINT NOT NULL,
  couponId BIGINT,
  createdAt TIMESTAMP NOT NULL,
  updatedAt TIMESTAMP NOT NULL,
  updatedBy TIMESTAMP NOT NULL
);


CREATE TABLE IF NOT EXISTS IMAGES (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  imageURL VARCHAR(255) NOT NULL,
  productId BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS ADDRESSES (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  address VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  deparment VARCHAR(255) NOT NULL,
  userId BIGINT NOT NULL,
  countryId INT NOT NULL,
  createdAt TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS COUNTRIES (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS COUPONS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  code VARCHAR(255) NOT NULL,
  discount DECIMAL(8,2) NOT NULL,
  expiresAt TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS CART (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  userId BIGINT,
  sessionToken VARCHAR(255),
  createdAt TIMESTAMP NOT NULL,
  totalPrice DECIMAL(8,2) NOT NULL
);

CREATE TABLE IF NOT EXISTS CART_ITEMS (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  cartId INT NOT NULL,
  productId INT NOT NULL,
  quantity INT NOT NULL,
  unitPrice DECIMAL(8,2) NOT NULL,
  expiresAt TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS INVENTORY (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  quantity BIGINT NOT NULL,
  productId BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS SUBCATEGORY (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDER_LOGS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  previousStatus ORDER_LOGS_previousStatus_enum NOT NULL,
  newStatus BIGINT NOT NULL,
  note VARCHAR(255),
  ipAddress VARCHAR(255) NOT NULL,
  orderId BIGINT NOT NULL,
  updatedAt TIMESTAMP NOT NULL,
  updatedBy INT NOT NULL
);

CREATE TABLE IF NOT EXISTS ROLES (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255) UNIQUE
);

CREATE TABLE IF NOT EXISTS PERMISSIONS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  name VARCHAR(255),
  description VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS ROLE_PERMISSIONS (
  roleId int PRIMARY KEY NOT NULL,
  permissionId int
);

ALTER TABLE ADDRESSES ADD CONSTRAINT addresses_countryid_foreign FOREIGN KEY (countryId) REFERENCES COUNTRIES (id);

ALTER TABLE IMAGES ADD CONSTRAINT images_productid_foreign FOREIGN KEY (productId) REFERENCES PRODUCTS (id);

ALTER TABLE ORDERS ADD CONSTRAINT orders_userid_foreign FOREIGN KEY (userId) REFERENCES USERS (id);

ALTER TABLE ORDER_ITEMS ADD CONSTRAINT order_items_productid_foreign FOREIGN KEY (productId) REFERENCES PRODUCTS (id);

ALTER TABLE ORDER_ITEMS ADD CONSTRAINT order_items_orderid_foreign FOREIGN KEY (orderId) REFERENCES ORDERS (id);

ALTER TABLE ORDER_LOGS ADD CONSTRAINT order_logs_orderid_foreign FOREIGN KEY (orderId) REFERENCES ORDERS (id);

ALTER TABLE ORDERS ADD CONSTRAINT orders_couponid_foreign FOREIGN KEY (couponId) REFERENCES COUPONS (id);

ALTER TABLE CART_ITEMS ADD CONSTRAINT cart_items_cartid_foreign FOREIGN KEY (cartId) REFERENCES CART (id);

ALTER TABLE CART ADD CONSTRAINT cart_userid_foreign FOREIGN KEY (userId) REFERENCES USERS (id);

ALTER TABLE PRODUCTS ADD CONSTRAINT products_categoryid_foreign FOREIGN KEY (categoryId) REFERENCES CATEGORIES (id);

ALTER TABLE INVENTORY ADD CONSTRAINT inventory_productid_foreign FOREIGN KEY (productId) REFERENCES PRODUCTS (id);

ALTER TABLE CATEGORIES ADD CONSTRAINT categories_idsubcategoy_foreign FOREIGN KEY (idSubcategoy) REFERENCES SUBCATEGORY (id);

ALTER TABLE ADDRESSES ADD CONSTRAINT addresses_userid_foreign FOREIGN KEY (userId) REFERENCES USERS (id);

ALTER TABLE ROLES ADD FOREIGN KEY (id) REFERENCES ROLE_PERMISSIONS (roleId);

ALTER TABLE ROLE_PERMISSIONS ADD FOREIGN KEY (permissionId) REFERENCES PERMISSIONS (id);

ALTER TABLE USERS ADD FOREIGN KEY (roleId) REFERENCES ROLES (id);

ALTER TABLE IMAGES ADD FOREIGN KEY (productId) REFERENCES IMAGES (id);
